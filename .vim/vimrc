""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" Vim main config
" by Sergey Yakovlev (me@klay.me)
" https://github.com/sergeyklay/
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

runtime startup/bundles.vim
runtime startup/settings.vim
runtime startup/console.vim

" save on loss of focus
au FocusLost * :wa

" more complete information when pressing <C-g>
map <C-g> g<C-g>
" save sesson to file
map <C-k> :mks! ~/.vim/session/sess.vim<CR>
" restore sesion from file
map <C-l> :so ~/.vim/session/sess.vim<CR>
" Map a specific shortcut to open NERDTree
map <C-n> :NERDTreeToggle<CR>
" that will list file names in the current directory
map <F2> :e <C-d>

" ; the same as :
nnoremap ; :

" autocommand stuff

" only do this part when compiled with support for autocommands
if has("autocmd")
  " put these in an autocmd group, so that we can delete them easily
  augroup vimrcEx
    au!

    " open a NERDTree automatically
    " when vim starts up if no files were specified
    autocmd vimenter * if !argc() | NERDTree | endif

    " for all text files set 'textwidth' to 78 characters
    autocmd FileType text setlocal textwidth=78
    " for all C files set 'textwidth' to 78 characters.
    autocmd bufreadpre *.c setlocal textwidth=78
    " some settings for php
    autocmd FileType php  setlocal makeprg=zca\ %<.php
    autocmd FileType php  setlocal errorformat=%f(line\ %l):\ %m

    " when editing a file, always jump to the last known cursor position
    " don't do it when the position is invalid or when inside an event handler
    autocmd BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif
  augroup END
else

endif

if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
        \ | wincmd p | diffthis
endif

" Using templates for new files
augroup template-plugin
  autocmd User plugin-template-loaded call s:template_keywords()
augroup END

function! s:template_keywords()
  " file name
  if search('<+FILE_NAME+>')
    silent %s/<+FILE_NAME+>/\=toupper(expand('%:t:r'))/g
  endif
  " cursor position
  if search('<+CURSOR+>')
    execute 'normal! "_da>'
  endif
  " current date
  silent %s/<+DATE+>/\=strftime('%Y-%m-%d')/g
endfunction

" Append modeline after last line in buffer
function! AppendModeline()
  let l:modeline = printf(" vim:ft=%s:ts=%d:sw=%d:sts=%d:tw=%d:%set",
        \ &ft, &ts, &sw, &sts, &tw, &et ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" vim:ft=vim:ts=8:sw=2:sts=2:tw=80:et
