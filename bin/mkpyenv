#!/usr/bin/env bash
#
# mkllmproj - Create a direnv-managed Python virtual environment.
#
# Copyright (C) 2024 Serghei Iakovlev <gnu@serghei.pl>
#
# This file is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this file.  If not, see <https://www.gnu.org/licenses/>.

# shellcheck shell=bash

# trace ERR through pipes
set -o pipefail

# trace ERR through 'time command' and other functions
set -o errtrace

# set -u : exit the script if you try to use an uninitialised variable
set -o nounset

# set -e : exit the script if any statement returns a non-true return value
set -o errexit

# Constants
readonly SCRIPT_NAME="${0##*/}"
readonly VERSION="1.1.0"

version() {
  cat <<EOF
${SCRIPT_NAME} ${VERSION}
Copyright (C) 2025 Serghei Iakovlev <gnu@serghei.pl>.
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF
}

usage() {
  cat << EOF
${SCRIPT_NAME} - create a direnv-managed Python virtual environment [version ${VERSION}]

Usage:	${SCRIPT_NAME} [options] <version> <virtualenv-name>

Description:
  ${SCRIPT_NAME} is a tool to create a Python virtual environment using pyenv and
  direnv setting up an isolated development environment for Python projects.
  ${SCRIPT_NAME} automates the process of creating a virtual environment and
  configuring direnv to manage environment activation.

Examples:
  # Create a virtual environment for Python 3.11.11 named 'webapp':
  \$ ${SCRIPT_NAME} 3.11.11 webapp

  # Create a virtual environment for Python 3.12.8 named 'api-service':
  \$ ${SCRIPT_NAME} 3.12.8 api-service

Positional parameters:
  version                   Python version to use for the virtual environment
  virtualenv-name           Virtual environment name.  Should follow the
                            following format: alphanumeric (with dash/underscore).

Command options:
  -h, --help                Show this help message
  -V, --version             Show program's version number

Notes:
  This tool depends on the following tools:
    - pyenv             Python version management tool
    - pyenv-virtualenv  Python virtual environment manager
    - direnv            Directory environment manager

  The tool will fail if pyenv or direnv are not installed.

  Existing .envrc file will not be overwritten without confirmation.

For bug reporting instructions, please see:
<https://github.com/sergeyklay/dotfiles/>.
EOF
}

# Process command line options
pyversion=""
pvenv=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      usage
      exit 0
      ;;
    -V|--version)
      version
      exit 0
      ;;
    -*)
      {
        echo "${SCRIPT_NAME}: invalid option: $1"
        echo "Try '${SCRIPT_NAME} --help' for more information."
      } 1>&2
      exit 1
      ;;
    *)
      # Ensure exactly two arguments are provided
      if [[ $# -gt 2 ]]; then
        {
          echo "${SCRIPT_NAME}: exactly two arguments are required"
          echo "Try '${SCRIPT_NAME} --help' for more information."
        } 1>&2
        exit 1
      fi

      # Assign arguments in order
      if [[ -z "$pyversion" ]]; then
        pyversion="$1"
      elif [[ -z "$pvenv" ]]; then
        pvenv="$1"
      fi
      shift
      ;;
  esac
done

main() {
  # Validate required parameters
  if [[ -z "$pyversion" || -z "$pvenv" ]]; then
    {
      echo "${SCRIPT_NAME}: missing required arguments"
      echo "Try '${SCRIPT_NAME} --help' for more information."
    } 1>&2
    exit 1
  fi

  # Validate python version format
  if ! [[ $pyversion =~ ^[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
    echo "${SCRIPT_NAME}: invalid Python version format. Expected format: X.Y.Z or X.Y" >&2
    exit 1
  fi

  # Validate virtualenv name
  if ! [[ $pvenv =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo "${SCRIPT_NAME}: virtualenv name must contain only letters, numbers, dashes, and underscores" >&2
    exit 1
  fi

  # Check dependencies
  local missing_deps=()
  for cmd in pyenv direnv; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      missing_deps+=("$cmd")
    fi
  done

  if [ ${#missing_deps[@]} -ne 0 ]; then
    echo "${SCRIPT_NAME}: missing required dependencies: ${missing_deps[*]}" >&2
    exit 1
  fi

  # Verify Python version availability
  if ! ( pyenv versions --bare | grep -x "$pyversion" >/dev/null 2>&1 ); then
    cat >&2 <<EOF
${SCRIPT_NAME}: Python version '${pyversion}' is not installed in pyenv.

Available Python versions:
$(pyenv versions --bare | sed 's/^/  - /')

To install ${pyversion}:
  pyenv install ${pyversion}
EOF
    exit 1
  fi

  local envrc_file=".envrc"
  local current_dir="$PWD"

  # Handle existing .envrc
  if [ -f "$envrc_file" ]; then
    echo "Warning: .envrc file already exists in current directory." >&2
    read -r -p "Do you want to overwrite it? [y/N] " reply
    echo
    if [[ ! $reply =~ ^[Yy]$ ]]; then
      echo "Operation cancelled." >&2
      exit 1
    fi
  fi

  # Create .envrc with proper configuration
  cat > "$envrc_file" <<EOF
# Python virtual environment configuration.
# Created by ${SCRIPT_NAME} on $(date -u +"%Y-%m-%d %H:%M:%S UTC").

# Set Python version and virtualenv name.
pyversion=${pyversion}
pvenv=${pvenv}

# Use specified Python version.
use python \${pyversion}

# Create the Python virtualenv if not yet done.
layout virtualenv \${pyversion} \${pvenv}

# Activate the Python virtualenv environment in current shell.
layout activate \${pvenv}-\${pyversion}

# Local Variables:
# mode: sh
# End:
EOF

  chmod 0644 "$envrc_file"

  # Allow direnv
  if ! direnv allow "$current_dir"; then
    echo "${SCRIPT_NAME}: failed to run 'direnv allow'" >&2
    exit 1
  fi

  echo "Virtual environment '${pvenv}' with Python ${pyversion} has been created successfully!"
}

main "$@"

# Local Variables:
# mode: sh
# End:
