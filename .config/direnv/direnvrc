# -*- mode: sh; -*-

use_nodejs() {
  local node_version="$1"
  local nvm_sh=""

  if [[ ! $(command -v nvm) || -z "${NVM_DIR+x}" ]]; then
    setup_nvm
    nvm_sh="$(command -v nvm 2> /dev/null)"
  fi

  if [[ -e "${nvm_sh}/nvm.sh" ]]; then
    . "${nvm_sh}/nvm.sh"
  fi

  if [[ $(command -v nvm) ]]; then
    nvm use --silent "$node_version"
  fi
}

# Use specified Python version.
use_python() {
  local pyversion="$1"

  if [ -n "$(which pyenv)" ]; then
    pyenv local ${pyversion}
  else
    log_error "Error:pyenv not found"
  fi
}

# Create the virtualenv.
layout_virtualenv() {
  local pyversion="$1"
  local pvenv="$2"

  if has pyenv; then
    if [ -n "$(which pyenv virtualenv)" ]; then
      pyenv virtualenv --force ${pyversion} "${pvenv}-${pyversion}"
      ln -sf "$(pyenv root)/versions/${pvenv}-${pyversion}" "${PWD}/.venv"
    else
      log_error "Error: pyenv virtualenv not found"
    fi

    pyenv local --unset
  else
    log_error "Error: pyenv not found"
  fi
}

# Activate the virtualenv.
layout_activate() {
  local pvenv="$1"

  if has pyenv; then
    local activate_script="$(pyenv root)/versions/${pvenv}/bin/activate"
    if [ -f "${activate_script}" ] && [ -r "${activate_script}" ]; then
      . "${activate_script}"
    else
      log_error "Error: the specified virtualenv '${pvenv}' is not found"
    fi

    pyenv local "${pvenv}"
  else
    log_error "Error: pyenv not found neither in the PATH nor in the SHELL functions"
  fi
}
