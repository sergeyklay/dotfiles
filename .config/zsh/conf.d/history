# Setting up history.
#
# The file containing the user specific settings for the history.

# The number of events loaded from $HISTFILE at startup.
HISTSIZE=1000

# The last $SAVEHIST events are the ones that are saved to $HISTFILE
SAVEHIST=5000

HISTFILE="$ZDOTDIR/.zsh_history"

# For the protection and ability for future analyzing
HISTTIMEFORMAT="%h %d %H:%M:%S "

# New history lines are added to the $HISTFILE as soon as they are
# entered.
#
# For more see: man zshoptions(1)
setopt inc_append_history

# Write and import history on every command.
#
# For more see: man zshoptions(1)
setopt share_history

# Don't add commands starting with space to history.
#
# For more see: man zshoptions(1)
setopt hist_ignore_space

# The older command will be removed from the list (if any).
#
# For more see: man zshoptions(1)
setopt hist_ignore_all_dups

# Allow events recalled from history to clobber with >
#
# For more see: man zshoptions(1)
setopt hist_allow_clobber

# Remove superfluous blanks from each command line being added to
# the history list.
#
# For more see: man zshoptions(1)
setopt hist_reduce_blanks

# Do store `history' and `fc' commands in the history.
#
# For more see: man zshoptions(1)
setopt no_hist_no_store

# Do not store function definitions in the history.
#
# For more see: man zshoptions(1)
setopt hist_no_functions

# Don't beep when reaching the limits of history.
#
# For more see: man zshoptions(1)
setopt no_hist_beep

# Write timestamps to history.
#
# For more see: man zshoptions(1)
setopt extended_history

## Key Bindings

# [Ctrl-r] - Search backward incrementally for a specified
# string.  The string may begin with ^ to anchor the search to the
# beginning of the line.
bindkey '^r' history-incremental-search-backward

# [PageUp] - Up a line of history
if [[ "${terminfo[kpp]}" != "" ]]; then
  bindkey "${terminfo[kpp]}" up-line-or-history
fi

# [PageDown] - Down a line of history
if [[ "${terminfo[knp]}" != "" ]]; then
  bindkey "${terminfo[knp]}" down-line-or-history
fi

# Start typing + [Up Arrow] - fuzzy find history forward.
#
# `kcuu1' capname is the Up Arrow on the keypad.  `^[[A' is the Up
# Arrow in the common part of the keyboard.  Note, some keyboards
# does not have keypad, for example notebooks.  Thus, we bind here
# `^[[A' as well as `kcuu1'.
#
# For more see: man terminfo(5) .

autoload -U up-line-or-beginning-search
zle -N up-line-or-beginning-search

if [[ "${terminfo[kcuu1]}" != "" ]]; then
  bindkey "${terminfo[kcuu1]}" up-line-or-beginning-search
fi

bindkey "^[[A" up-line-or-beginning-search

# Start typing + [Down Arrow] - fuzzy find history backward.
#
# `kcud1' capname is the Down Arrow on the keypad.  `^[[B' is the
# Down Arrow in the common part of the keyboard.  Note, some
# keyboards does not have keypad, for example notebooks.  Thus, we
# bind here `^[[B' as well as `kcud1'.
#
# For more see: man terminfo(5) .

autoload -U down-line-or-beginning-search
zle -N down-line-or-beginning-search

if [[ "${terminfo[kcud1]}" != "" ]]; then
  bindkey "${terminfo[kcud1]}" down-line-or-beginning-search
fi

bindkey "^[[B" down-line-or-beginning-search

## Directory History

# Keep track of visited directories.
#
#   $ dirs -v # See the directores stack
#   $ cd -N   # Go back to a visited folder N
#
# For more see: man zshoptions(1)
setopt auto_pushd

# Don't push multiple copies of the same directory onto the
# directory stack.
# For more see: man zshoptions(1)
setopt pushd_ignore_dups

# Have pushd with no arguments act like `pushd $HOME'.
# For more see: man zshoptions(1)
setopt pushd_to_home

# Do not print the directory stack after pushd or popd.
# For more see: man zshoptions(1)
setopt pushd_silent

# This reverts the +/- operators.
# For more see: man zshoptions(1)
setopt pushd_minus

DIRSTACKSIZE=20
DIRSTACKFILE=$ZSH_CACHE_DIR/dirs

# This will change directory when zsh starts session
# to the last visited directory.
if [[ -f "$DIRSTACKFILE" ]] && (( ${#dirstack} == 0 ))
then
  dirstack=("${(@f)"$(< "$DIRSTACKFILE")"}")
  [[ -d "${dirstack[1]}" ]] && cd -- "${dirstack[1]}"
fi

pushd-hook() {
  print -l -- "$PWD" "${(u)dirstack[@]}" > "$DIRSTACKFILE"
}

add-zsh-hook -Uz chpwd pushd-hook
