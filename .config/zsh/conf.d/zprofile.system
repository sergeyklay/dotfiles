# System-wide profile for interactive zsh(1) login shells.

# The original file was modified to prevent the reordering of PATH entries.
# Instead of using path_helper directly, which changes the order of PATH
# entries by placing system directories before user-defined ones, we now
# capture its output, parse it, and append any new paths to the existing PATH.
# This ensures that user-defined directories maintain their higher priority.

# Installation:
#
# $ sudo cp /etc/zprofile /etc/zprofile.backup
# # sudo ln -sf $(pwd)/.config/zsh/conf.d/zprofile.system /etc/zprofile

# No duplicate entries are needed.
typeset -U path

if [ -x /usr/libexec/path_helper ]; then
    # Capture the output of path_helper
    PATH_HELPER_OUTPUT=$(/usr/libexec/path_helper -s)

    # Extract the new PATH from the output
    NEW_PATH=$(echo "$PATH_HELPER_OUTPUT" | grep "^PATH=" | sed 's/^PATH=//;s/"//g' | sed 's/; export PATH;//g')

    # Extract the new MANPATH from the output
    NEW_MANPATH=$(echo "$PATH_HELPER_OUTPUT" | grep "^MANPATH=" | sed 's/^MANPATH=//;s/"//g' | sed 's/; export MANPATH;//g')

    # Append new paths to the current PATH
    for _p in $(echo "$NEW_PATH" | tr ':' ' '); do
        [ -d $p ] && path=($_p $path)
    done
    unset _p


    # Export the modified PATH
    export PATH


    # Append new manpaths to the current MANPATH
    for _m in $(echo "$NEW_MANPATH" | tr ':' ' '); do
        [ -d $p ] && manpath=($p $manpath)
    done
    unset _m

    # Export the modified MANPATH
    export MANPATH
fi

# Local Variables:
# mode: shell-script
# End:
