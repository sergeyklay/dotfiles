# ptfancy prompt theme
#
# This theme relies on the folowing Zsh options:
#   - prompt_subst (see: conf.d/prompt)
#   - local_options (see: conf.d/gopts)
#
# As well as on the following functions:
#   - add-zsh-hook (see: conf.d/defuns)
#
# This file is autoloaded as a function in the current shell
# context.  For more info see zshcontrib(1).

# Configure VCS info.

# Export the following messages:
#
# $vcs_info_msg_0_   - Branch name (and possible VCS backend)
# $vcs_info_msg_1_   - Stage status
# $vcs_info_msg_2_   - VCS actions
zstyle ':vcs_info:*' max-exports 3

zstyle ':vcs_info:*' enable svn git

# Used VCS formats are:
#
# %b   - Information about the current branch.
# %c   - The string for the staged changes in the repository.
# %u   - The string for the unstaged changes in the repository.
# %m   - A “misc” replacement.
# %a   - An identifier that describes the action.

# Defaut VCS format.
zstyle ':vcs_info:*'     formats '%s:%b'
zstyle ':vcs_info:*'     actionformats '%s:%b' '%m' '<!%a>'

# Git format.
zstyle ':vcs_info:git:*' formats '%b' '%c%u%m'
zstyle ':vcs_info:git:*' actionformats '%b' '%c%u%m' '<!%a>'

zstyle ':vcs_info:git:*' check-for-changes true # check for changes
zstyle ':vcs_info:git:*' stagedstr '+'          # staged changes
zstyle ':vcs_info:git:*' unstagedstr '-'        # unstaged changes

# Uncomment to enable debug.
# zstyle ':vcs_info:*' debug true

# Register Git hooks.
#
# These hook function should be set before setting message to be
# able modify message.   When we register hooks in this way we
# expect our functions be called up to 3 times: 2 times for `format'
# and 3 times for `actionformats'.
zstyle ':vcs_info:git+set-message:*' hooks \
       git_hook_begin \
       git_untracked

prompt_ptfancy_help () {
  cat <<'ENDHELP'
This prompt is color-scheme-able.  With this prompt theme, the
prompt contains the current username and hostname, the current
working directory, the previous command's exit code (if non-zero),
the flag “[SSH]” (if there is a SSH connection), and information
about Git/SVN repository status (when inside a VCS repository).

You can invoke it thus:

  prompt ptfancy [<color1> [<color2> [<color3> [<color4>]]]]

where the colors are for the user@host foreground, exit status,
current working directory, and VCS branch respectively.  The default
colors are cyan, red, blue, and yellow.  To specify colours, use
English words like “magenta”.

This theme is designed for dark backgrounds, but should work with
light backgrounds too.  Recommended fonts for this theme are: Roboto
Mono, DejaVu Sans Mono, Fira Code, Source Code Pro, Hack, Consolas
or similar.

This theme relies on `localoptions' and `promptsubst' options.  Thus
these options should be set before.  For more see zshoptions(1).  To
modify `precmd' and `preexec' the availability of `add-zsh-hook' is
required.  For more see zshcontrib(1).
ENDHELP
}

# Are we inside a Git repository?
#
# If this hook function returns anything other than 0, subsequent
# hook functions will not be called.
+vi-git_hook_begin () {
  if command git rev-parse --is-inside-work-tree > /dev/null 2>&1
  then
    return 0
  else
    return 1
  fi
}

# Do we have Git untracked files in the working tree?
+vi-git_untracked () {
  # According to our `format' and  `actionformat' call this for the
  # second message
  [[ "$1" != "1" ]] && return 0

  if command git status --porcelain 2> /dev/null \
             | awk '{print $1}' \
             | command grep -F '??' > /dev/null 2>&1 ; then
    hook_com[unstaged]+='?'
  fi
}

# Used format specifiers are:
#
# %B   - Start boldface mode
# %b   - Stop boldface mode
#
# %K   - Start using a different background color
# %k   - Stop using a different background color
#
# %F   - Start using a different foreground color
# %f   - Stop using a different foreground color
#
# %?   - Exit status
# %#   - A ‘#’ if the shell is running with privileges, a ‘%’ if not
# %~   - Current working directory
prompt_ptfancy_setup () {
  # Do not print commands and their arguments as they are executed.
  # For more see zshoptions(1).
  setopt no_xtrace

  # Array elements are numbered from 1.
  # For more see zshoptions(1).
  setopt no_ksh_arrays

  # Will be used to provide current VCS info.
  # For more see zshcontrib(1).
  autoload -Uz vcs_info

  local -a pcc
  local -A pc

  # Default colour scheme.
  pcc[1]=${1:-'cyan'}
  pcc[2]=${2:-'red'}
  pcc[3]=${3:-'blue'}
  pcc[4]=${4:-'yellow'}

  pc['lsb']="%F{$pcc[3]}[%f" # [
  pc['rsb']="%F{$pcc[3]}]%f" # ]

  # Reset colors.
  local p_end='%f%b'

  # Host info.
  local p_userhost="%B%F{$pcc[1]}%(!.%m.%n@%m)%f "

  local p_userhost_etc=$(print -P "$p_userhost%(4~|...|)%3~")
  local p_len=${#p_userhost_etc}

  # Current working path.
  local p_userpwd

  if [[ $p_len -lt 40 ]]; then
    p_userpwd="%F{$pcc[3]}%(4~|...|)%3~%F{default}"
  else
    local zero='%([BSUbfksu]|[FBK]{*})'
    local p_userhost_nc="${p_userhost//$~zero/}"
    local p_userhost_enc=$(print -P "$p_userhost_nc")
    local space_left=$(( $COLUMNS - $#p_userhost_enc - 2 ))

    p_userpwd="%F{$pcc[3]}%${space_left}<...<%~%F{default}"
  fi

  # Exit status.
  local p_rc="%(?..$pc['lsb']%F{$pcc[2]}%?%1v%f$pc['rsb'] )"

  # SSH info.
  local p_ssh

  # If there is a SSH connection setup colored string using $2 as a
  # color for “SSH” word and $3 as a color for ‘[’ and ‘]’ brackets.
  if [ -n "${SSH_CONNECTION}" ]; then
    p_ssh="$pc['lsb']%F{$pcc[2]}SSH%f$pc['rsb'] "
  fi

  # This contains information about VCS repository status when
  # inside a VCS repository.
  #
  # For the details see `prompt_ptfancy_precmd' function.
  local vcs_prompt='%(2v. '             # is there a branch name?
        vcs_prompt+='%F{default}±%f '   # ‘±’
        vcs_prompt+="%F{$pcc[4]}%2v%f " # branch name
        vcs_prompt+='%(3v.%3v.)'
        vcs_prompt+='%(4v. %4v.)'
        vcs_prompt+=' . )'              # end condition

  # Set `zle_highlight' according to theme definition.
  typeset -ga zle_highlight

  # Contexts:
  # - `default': Any text within the command line not affected by
  #              any other highlighting.
  #
  # Types of highlighting:
  # - `none':    No highlighting is applied to the given context.
  zle_highlight[(r)default:*]=default:none

  # The primary prompt string, printed before a command is read.
  # For more see zshparam(1).
  PS1="$p_userhost$p_rc$p_ssh$p_userpwd$vcs_prompt%#$p_end "

  # The secondary prompt, printed when the shell needs more
  # information to complete a command.  It is expanded in the same
  # way as PS1.
  # For more see zshparam(1).
  PS2='%_> '

  # Selection prompt used within a select loop.  It is expanded in
  # the same way as PS1.
  # For more see zshparam(1).
  PS3='?# '

  # Execute `prompt_ptfancy_precmd' before each prompt.  This will
  # add `prompt_ptfancy_precmd' to $precmd_functions global array.
  # For more see zshcontrib(1).
  add-zsh-hook precmd prompt_ptfancy_precmd
}

prompt_ptfancy_precmd () {
  local exitstatus=$?

  # Do not print commands and their arguments as they are executed.
  # For more see zshoptions(1).
  setopt no_xtrace

  # Array elements are numbered from 1.
  # For more see zshoptions(1).
  setopt no_ksh_arrays

  # An array (colon-separated list) whose elements can be used in
  # PS1.  Setting psvar also sets PSVAR, and vice versa.
  # For more see zshparam(1).
  psvar=()

  [[ $exitstatus -ge 128 ]] &&
    psvar[1]=" $signals[$exitstatus-127]" || psvar[1]=""

  vcs_info
  [[ -n $vcs_info_msg_0_ ]] && psvar[2]="$vcs_info_msg_0_"
  [[ -n $vcs_info_msg_1_ ]] && psvar[3]="$vcs_info_msg_1_"
  [[ -n $vcs_info_msg_2_ ]] && psvar[4]="$vcs_info_msg_2_"
}

prompt_ptfancy_preview () {
  local -a colors
  colors=(red green blue magenta)

  if (( ! $#* )); then
    prompt_preview_theme \
      ptfancy $colors[1] $colors[2] $colors[3] $colors[4]
  else
    prompt_preview_theme ptfancy "$@"
  fi
}

prompt_ptfancy_setup "$@"

# Local Variables:
# mode: sh
# End:
