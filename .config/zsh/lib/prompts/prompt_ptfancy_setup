#!/usr/bin/env zsh
#
# ptfancy prompt theme
#
# This theme relly on the folowing options:
#   - local_options (see: conf.d/gops)
#   - prompt_subst (see: conf.d/prompt)
#
# As well as on the following functions:
#   - add-zsh-hook (see: conf.d/defuns)
#
# Note: This file is autoloaded as a function in the current shell
# context.

# Cheat Sheet:
#
# %B   - Start boldface mode
# %b   - Stop boldface mode
#
# %K   - Start using a different background color
# %k   - Stop using a different background color
#
# %F   - Start using a different foreground color
# %f   - Stop using a different foreground color
#
# %?   - Exit status
# %#   - A '#' if the shell is running with privileges, a '%' if not
# %~   - Current working directory

# Echoes information about Git repository status when inside a Git
# repository.
git_info() {
  # Exit if not inside a Git repository.
  ! git rev-parse --is-inside-work-tree > /dev/null 2>&1 && return

  # Git branch/tag, or name-rev if on detached head.
  local location
  location="$(git symbolic-ref -q HEAD || \
            git name-rev --name-only --no-undefined --always HEAD)"
  location="${location#(refs/heads/|tags/)}"

  [ "${#location}" -ge 24 ] && location="${location:0:21}..."

  location="${location:-no branch}"

  local ahead="%{$fg[red]%}⇡num%{$reset_color%}"
  local behind="%{$fg[cyan]%}⇣num%{$reset_color%}"
  local merging="%{$fg[magenta]%}⚡︎%{$reset_color%}"
  local untracked="%{$fg[red]%}●%{$reset_color%}"
  local modified="%{$fg[yellow]%}●%{$reset_color%}"
  local staged="%{$fg[green]%}●%{$reset_color%}"

  local -a divs
  local -a flags

  local num_ahead="$(git log --oneline @{u}.. 2> /dev/null | \
                   wc -l | tr -d ' ')"
  if [ "$num_ahead" -gt 0 ]; then
    divs+=( "${ahead//num/$num_ahead}" )
  fi

  local num_behind="$(git log --oneline ..@{u} 2> /dev/null | \
                    wc -l | tr -d ' ')"
  if [ "$num_behind" -gt 0 ]; then
    divs+=( "${behind//num/$num_behind}" )
  fi

  local git_dir="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $git_dir ] && test -r $git_dir/MERGE_HEAD; then
    flags+=( "$merging" )
  fi

  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]
  then
    flags+=( "$untracked" )
  fi

  if ! git diff --quiet 2> /dev/null; then
    flags+=( "$modified" )
  fi

  if ! git diff --cached --quiet 2> /dev/null; then
    flags+=( "$staged" )
  fi

  local -a git_prompt

  # ±
  git_prompt+=( '%F{default}±%f ' )

  # Git branch.
  git_prompt+=( "%F{$1}${location}%f" )

  # Git divergences.
  [[ ${#divs[@]} -ne 0 ]] && git_prompt+=( " ${(j::)divs}" )

  # Exist status.
  [[ ${#flags[@]} -ne 0 ]] && git_prompt+=( " ${(j::)flags}" )

  # Join the words of arrays together.
  echo "${(j::)git_prompt}"
}

prompt_ptfancy_help () {
  cat <<'ENDHELP'
This prompt is color-scheme-able.  With this prompt theme, the
prompt contains the current username and hostname, the current
working directory, the previous command's exit code (if non-zero),
the flag ``[SSH]'' (if there is a ssh connection), and information
about Git repository status (when inside a Git repository).

You can invoke it thus:

  prompt ptfancy [<color1> [<color2> [<color3> [<color4>]]]]

where the colors are for the user@host foreground, exist status,
current working directory, and Git branch respectively.  The default
colors are cyan, red, blue, and yellow.  To specify colours, use
English words like `magenta'.

This theme is designed for dark backgrounds, but should work with
light backgrounds too.  Recommended fonts for this theme are: Roboto
Mono, DejaVu Sans Mono, Fira Code, Source Code Pro, Hack, Consolas
or similar.

This theme relies on `localoptions' and `promptsubst' options.  Thus
these options should be set before.  For more see zshoptions(1).  To
modify `precmd' and `preexec' the availability of `add-zsh-hook' is
required.  For more see zshcontrib(1).
ENDHELP
}

prompt_ptfancy_setup () {
  # Will be used to provide current VCS info.
  # For more see: man zshcontrib(1)
  autoload -Uz vcs_info

  # Default colour scheme.
  local -a pcc

  pcc[1]=${1:-'cyan'}
  pcc[2]=${2:-'red'}
  pcc[3]=${3:-'blue'}
  pcc[4]=${4:-'yellow'}

  # Reset colors.
  local post_prompt='%b%f'

  # Host info.
  local base_prompt="%B%F{$pcc[1]}%(!.%m.%n@%m)%f "

  local base_prompt_etc=$(print -P "$base_prompt%(4~|...|)%3~")
  local prompt_length=${#base_prompt_etc}

  # Current working path.
  local path_prompt

  if [[ $prompt_length -lt 40 ]]; then
    path_prompt="%B%F{$pcc[3]}%(4~|...|)%3~%F{default}"
  else
    local base_prompt_no_color="${base_prompt//$~zero/}"
    local zero='%([BSUbfksu]|[FBK]{*})'
    local base_prompt_expanded_no_color=$(print -P "$base_prompt_no_color")
    local space_left=$(( $COLUMNS - $#base_prompt_expanded_no_color - 2 ))

    path_prompt="%B%F{$pcc[3]}%${space_left}<...<%~%F{default}"
  fi

  # Exit status.
  local status_prompt="%F{$pcc[2]}%?%f"
  local lsb="%F{$pcc[3]}[%f"
  local rsb="%F{$pcc[3]}]%f"

  status_prompt="%(?..$lsb$status_prompt$rsb )"

  # SSH info.
  local -a ssh_prompt

  # Setup colored string using $2 as a color for “SSH” word and $3
  # as a color for ‘[’ and ‘]’ brackets.
  if [ -n "${SSH_CONNECTION}" ]; then
    ssh_prompt+=( "%F{$pcc[3]}[%f" )   # [
    ssh_prompt+=( "%F{$pcc[2]}SSH%f" ) # SSH
    ssh_prompt+=( "%F{$pcc[3]}]%f " )  # ]
  fi

  # Git info.
  local git_prompt="$(git_info $pcc[4])"

  # The primary prompt string, printed before a command is read.
  PS1="$base_prompt$status_prompt${(j::)ssh_prompt}"
  PS1="$PS1$path_prompt $git_prompt %# $post_prompt"

  # The secondary prompt, printed when the shell needs more
  # information to complete a command.  It is expanded in the same
  # way as PS1.
  PS2='%_> '

  # Selection prompt used within a select loop.  It is expanded in
  # the same way as PS1.
  PS3='?# '

  # Execute `prompt_ptfancy_precmd' before each prompt.  This will
  # add `prompt_ptfancy_precmd' to $precmd_functions global array.
  # For more see: man zshcontrib(1)
  add-zsh-hook precmd prompt_ptfancy_precmd
}

prompt_ptfancy_precmd () {
  # Do not print commands and their arguments as they are executed.
  # For more see: man zshoptions(1)
  setopt no_xtrace
}

prompt_ptfancy_preview () {
  local -a colors
  colors=(red green blue magenta)

  if (( ! $#* )); then
    prompt_preview_theme \
      ptfancy $colors[1] $colors[2] $colors[3] $colors[4]
  else
    prompt_preview_theme ptfancy "$@"
  fi
}

prompt_ptfancy_setup "$@"

# Local Variables:
# mode: sh
# End:
