# ptfancy prompt theme
#
# This theme relly on the folowing options:
#   - prompt_subst (see: conf.d/prompt)
#
# As well as on the following functions:
#   - add-zsh-hook (see: conf.d/defuns)
#
# Note: This file is autoloaded as a function in the current shell
# context.

# Cheat Sheet:
#
# %B   - Start boldface mode
# %b   - Stop boldface mode
#
# %K   - Start using a different background color
# %k   - Stop using a different background color
#
# %F   - Start using a different foreground color
# %f   - Stop using a different foreground color
#
# %?   - Exit status
# %#   - A '#' if the shell is running with privileges, a '%' if not
# %~   - Current working directory

# Echoes information about Git repository status when inside a Git
# repository.
git_info() {
  # Exit if not inside a Git repository.
  ! git rev-parse --is-inside-work-tree > /dev/null 2>&1 && return

  # Git branch/tag, or name-rev if on detached head.
  local location
  location="$(git symbolic-ref -q HEAD || \
            git name-rev --name-only --no-undefined --always HEAD)"
  location="${location#(refs/heads/|tags/)}"

  [ "${#location}" -ge 24 ] && location="${location:0:21}..."

  location="${location:-no branch}"

  local ahead="%{$fg[red]%}⇡num%{$reset_color%}"
  local behind="%{$fg[cyan]%}⇣num%{$reset_color%}"
  local merging="%{$fg[magenta]%}⚡︎%{$reset_color%}"
  local untracked="%{$fg[red]%}●%{$reset_color%}"
  local modified="%{$fg[yellow]%}●%{$reset_color%}"
  local staged="%{$fg[green]%}●%{$reset_color%}"

  local -a divs
  local -a flags

  local num_ahead="$(git log --oneline @{u}.. 2> /dev/null | \
                   wc -l | tr -d ' ')"
  if [ "$num_ahead" -gt 0 ]; then
    divs+=( "${ahead//num/$num_ahead}" )
  fi

  local num_behind="$(git log --oneline ..@{u} 2> /dev/null | \
                    wc -l | tr -d ' ')"
  if [ "$num_behind" -gt 0 ]; then
    divs+=( "${behind//num/$num_behind}" )
  fi

  local git_dir="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $git_dir ] && test -r $git_dir/MERGE_HEAD; then
    flags+=( "$merging" )
  fi

  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]
  then
    flags+=( "$untracked" )
  fi

  if ! git diff --quiet 2> /dev/null; then
    flags+=( "$modified" )
  fi

  if ! git diff --cached --quiet 2> /dev/null; then
    flags+=( "$staged" )
  fi

  local -a git_prompt

  # ±
  git_prompt+=( '%F{default}±%f ' )

  # Git branch.
  git_prompt+=( "%F{$1}${location}%f" )

  # Git divergences.
  [[ ${#divs[@]} -ne 0 ]] && git_prompt+=( " ${(j::)divs}" )

  # Exist status.
  [[ ${#flags[@]} -ne 0 ]] && git_prompt+=( " ${(j::)flags}" )

  # Join the words of arrays together.
  echo "${(j::)git_prompt}"
}

prompt_ptfancy_help () {
  cat <<'ENDHELP'
This prompt is color-scheme-able.  With this prompt theme, the
prompt contains the current username and hostname, the current
working directory, the previous command's exit code (if non-zero),
the flag ``[SSH]'' (if there is a ssh connection), and information
about Git repository status (when inside a Git repository).

You can invoke it thus:

  prompt ptfancy [<color1> [<color2> [<color3> [<color4>]]]]

where the colors are for the user@host foreground, exist status,
current working directory, and Git branch respectively.  The default
colors are cyan, red, blue, and yellow.  To specify colours, use
English words like `magenta'.

This theme is designed for dark backgrounds, but should work with
light backgrounds too.  Recommended fonts for this theme are: Roboto
Mono, DejaVu Sans Mono, Fira Code, Source Code Pro, Hack, Consolas
or similar.

This theme relies on `localoptions' and `promptsubst' options.  Thus
these options should be set before.  For more see zshoptions(1).  To
modify `precmd' and `preexec' the availability of `add-zsh-hook' is
required.  For more see zshcontrib(1).
ENDHELP
}

prompt_ptfancy_setup () {
  # This will enable a separated context for options in functions.
  # For more see: man zshoptions(1)
  setopt local_options

  # Do not print commands and their arguments as they are executed.
  # For more see: man zshoptions(1)
  setopt no_xtrace

  # Array elements are numbered from 1.
  # For more see: man zshoptions(1)
  setopt no_ksh_arrays

  # Will be used to provide current VCS info.
  # For more see: man zshcontrib(1)
  autoload -Uz vcs_info

  # Enable VCS info.
  zstyle ':vcs_info:*' formats '%b'

  local -a pcc
  local -A pc

  # Default colour scheme.
  pcc[1]=${1:-'cyan'}
  pcc[2]=${2:-'red'}
  pcc[3]=${3:-'blue'}
  pcc[4]=${4:-'yellow'}

  pc['lsb']="%F{$pcc[3]}[%f" # [
  pc['rsb']="%F{$pcc[3]}]%f" # ]

  # Reset colors.
  local p_end='%f%b'

  # Host info.
  local p_userhost="%B%F{$pcc[1]}%(!.%m.%n@%m)%f "

  local p_userhost_etc=$(print -P "$p_userhost%(4~|...|)%3~")
  local p_len=${#p_userhost_etc}

  # Current working path.
  local p_userpwd

  if [[ $p_len -lt 40 ]]; then
    p_userpwd="%F{$pcc[3]}%(4~|...|)%3~%F{default}"
  else
    local zero='%([BSUbfksu]|[FBK]{*})'
    local p_userhost_nc="${p_userhost//$~zero/}"
    local p_userhost_enc=$(print -P "$p_userhost_nc")
    local space_left=$(( $COLUMNS - $#p_userhost_enc - 2 ))

    p_userpwd="%F{$pcc[3]}%${space_left}<...<%~%F{default}"
  fi

  # Exit status.
  local p_rc="%(?..$pc['lsb']%F{$pcc[2]}%?%1v%f$pc['rsb'] )"

  # SSH info.
  local p_ssh

  # If there is a SSH connection setup colored string using $2 as a
  # color for “SSH” word and $3 as a color for ‘[’ and ‘]’ brackets.
  if [ -n "${SSH_CONNECTION}" ]; then
    p_ssh="$pc['lsb']%F{$pcc[2]}SSH%f$pc['rsb'] "
  fi

  # Git info.
  local git_prompt="%(2v. %2v . )"

  # Set `zle_highlight' according to theme definition.
  typeset -ga zle_highlight

  # Contexts:
  # - `default': Any text within the command line not affected by
  #              any other highlighting.
  #
  # Types of highlighting:
  # - `none':    No highlighting is applied to the given context.
  zle_highlight[(r)default:*]=default:none

  # The primary prompt string, printed before a command is read.
  # For more see: man zshparam(1)
  PS1="$p_userhost$p_rc$p_ssh$p_userpwd$git_prompt%#$p_end "

  # The secondary prompt, printed when the shell needs more
  # information to complete a command.  It is expanded in the same
  # way as PS1.
  # For more see: man zshparam(1)
  PS2='%_> '

  # Selection prompt used within a select loop.  It is expanded in
  # the same way as PS1.
  # For more see: man zshparam(1)
  PS3='?# '

  # Execute `prompt_ptfancy_precmd' before each prompt.  This will
  # add `prompt_ptfancy_precmd' to $precmd_functions global array.
  # For more see: man zshcontrib(1)
  add-zsh-hook precmd prompt_ptfancy_precmd
}

prompt_ptfancy_precmd () {
  local exitstatus=$?

  # This will enable a separated context for options in functions.
  # For more see: man zshoptions(1)
  setopt local_options

  # Do not print commands and their arguments as they are executed.
  # For more see: man zshoptions(1)
  setopt no_xtrace

  # Array elements are numbered from 1.
  # For more see: man zshoptions(1)
  setopt no_ksh_arrays

  # An array (colon-separated list) whose elements can be used in
  # PS1.  Setting psvar also sets PSVAR, and vice versa.
  # For more see: man zshparam(1)
  psvar=()

  [[ $exitstatus -ge 128 ]] &&
    psvar[1]=" $signals[$exitstatus-127]" || psvar[1]=""

  vcs_info
  [[ -n $vcs_info_msg_0_ ]] && psvar[2]="$vcs_info_msg_0_"
}

prompt_ptfancy_preview () {
  local -a colors
  colors=(red green blue magenta)

  if (( ! $#* )); then
    prompt_preview_theme \
      ptfancy $colors[1] $colors[2] $colors[3] $colors[4]
  else
    prompt_preview_theme ptfancy "$@"
  fi
}

prompt_ptfancy_setup "$@"

# Local Variables:
# mode: sh
# End:
