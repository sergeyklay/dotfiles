#!/usr/bin/env zsh
#
# ptfancy prompt theme
#
# This theme relly on the folowing options:
#   - local_options (see: conf.d/gops)
#   - prompt_subst (see: conf.d/prompt)
#
# As well as on the following functions:
#   - add-zsh-hook (see: conf.d/defuns)
#
# Note: This file is autoloaded as a function in the current shell
# context.

# Cheat Sheet:
#
# %B   - Start boldface mode
# %b   - Stop boldface mode
#
# %K   - Start using a different background color
# %k   - Stop using a different background color
#
# %F   - Start using a different foreground color
# %f   - Stop using a different foreground color
#
# %?   - Exit status
# %#   - A '#' if the shell is running with privileges, a '%' if not
# %~   - Current working directory

# Echoes a username/host string when connected over SSH
# (empty otherwise).
ssh_info() {
  local -a ssh_prompt

  if [ -n "${SSH_CONNECTION}" ]
  then
    ssh_prompt+=( '%F{blue}[%f' )  # [
    ssh_prompt+=( '%F{red}SSH%f' ) # SSH
    ssh_prompt+=( '%F{blue}]%f ' ) # ]
  fi

  # Join the words of arrays together.
  echo "${(j::)ssh_prompt}"
}

# Echoes information about Git repository status when inside a Git
# repository.
git_info() {
  # Exit if not inside a Git repository.
  ! git rev-parse --is-inside-work-tree > /dev/null 2>&1 && return

  # Git branch/tag, or name-rev if on detached head.
  local location
  location="$(git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD)"
  location="${location#(refs/heads/|tags/)}"

  [ "${#location}" -ge 24 ] && location="${location:0:21}..."

  location="${location:-no branch}"

  local status_dirty
  if [ "$(git --no-optional-locks status --untracked-files='no' --porcelain)" ]
  then
    status_dirty='%F{green}*'
  else
    unset status_dirty
  fi

  local ahead="%{$fg[red]%}⇡num%{$reset_color%}"
  local behind="%{$fg[cyan]%}⇣num%{$reset_color%}"
  local merging="%{$fg[magenta]%}⚡︎%{$reset_color%}"
  local untracked="%{$fg[red]%}●%{$reset_color%}"
  local modified="%{$fg[yellow]%}●%{$reset_color%}"
  local staged="%{$fg[green]%}●%{$reset_color%}"

  local -a divs
  local -a flags

  local num_ahead="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$num_ahead" -gt 0 ]
  then
    divs+=( "${ahead//num/$num_ahead}" )
  fi

  local num_behind="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$num_behind" -gt 0 ]
  then
    divs+=( "${behind//num/$num_behind}" )
  fi

  local git_dir="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $git_dir ] && test -r $git_dir/MERGE_HEAD; then
    flags+=( "$merging" )
  fi

  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]
  then
    flags+=( "$untracked" )
  fi

  if ! git diff --quiet 2> /dev/null
  then
    flags+=( "$modified" )
  fi

  if ! git diff --cached --quiet 2> /dev/null
  then
    flags+=( "$staged" )
  fi

  local -a git_prompt

  # ±
  git_prompt+=( '%F{white}±%f ' )

  # Git branch.
  git_prompt+=( "%F{yellow}${location}%f" )

  # Git divergences.
  [[ ${#divs[@]} -ne 0 ]] && git_prompt+=( " ${(j::)divs}" )

  # Exist status.
  [[ ${#flags[@]} -ne 0 ]] && git_prompt+=( " ${(j::)flags}" )

  # Join the words of arrays together.
  echo "${(j::)git_prompt}"
}

prompt_ptfancy_help () {
  cat <<'EOF'
This prompt is color-scheme-able.  You can invoke it thus:

  prompt ptfancy [<color1> [<color2> [<color3>]]]

where the colors are for the user@host foreground, exist status, and
current working directory, respectively.  The default colors are
cyan, red and blue.  This theme works best with a dark background.

Recommended fonts for this theme: Roboto Mono, DejaVu Sans Mono,
Source Code Pro or similar.

This theme relly on `localoptions' and `promptsubst' options.  Thus
these options should be set before.  For more see zshoptions(1).  To
modify `precmd' and `preexec' the availability of `add-zsh-hook' is
required.   For more see zshcontrib(1).
EOF
}

prompt_ptfancy_setup () {
  # Do not print a warning message when a global parameter is
  # created in a function by an assignment or in math context.
  # For more see: man zshoptions(1)
  setopt no_warn_create_global

  prompt_ptfancy_color1=${1:-'cyan'}
  prompt_ptfancy_color2=${2:-'red'}
  prompt_ptfancy_color3=${3:-'blue'}

  # reset colors
  post_prompt='%b%f'

  # host info
  base_prompt='%B%F{$prompt_ptfancy_color1}%(!.%m.%n@%m)%f '

  # exit status
  status_prompt='%(?..%F{blue}[%F{$prompt_ptfancy_color2}%?%F{blue}] )'

  # ssh info
  ssh_prompt='$(ssh_info)'

  # git info
  git_prompt='$(git_info)'

  local zero='%([BSUbfksu]|[FBK]{*})'
  base_prompt_no_color="${base_prompt//$~zero/}"
  post_prompt_no_color="${post_prompt//$~zero/}"

  add-zsh-hook precmd prompt_ptfancy_precmd
}

prompt_ptfancy_precmd () {
  # Do not print commands and their arguments as they are executed.
  # For more see: man zshoptions(1)
  setopt no_xtrace

  # Do not print a warning message when a global parameter is
  # created in a function by an assignment or in math context.
  # For more see: man zshoptions(1)
  setopt no_warn_create_global

  local base_prompt_expanded_no_color base_prompt_etc
  local prompt_length space_left

  base_prompt_expanded_no_color=$(print -P "$base_prompt_no_color")
  base_prompt_etc=$(print -P "$base_prompt%(4~|...|)%3~")
  prompt_length=${#base_prompt_etc}

  if [[ $prompt_length -lt 40 ]]; then
    path_prompt="%B%F{$prompt_ptfancy_color3}%(4~|...|)%3~%F{white}"
  else
    space_left=$(( $COLUMNS - $#base_prompt_expanded_no_color - 2 ))
    path_prompt="%B%F{$prompt_ptfancy_color3}%${space_left}<...<%~%F{white}"
  fi

  PS1="$base_prompt$status_prompt$ssh_prompt$path_prompt $git_prompt %# $post_prompt"
  PS2="$base_prompt$status_prompt$ssh_prompt$path_prompt $git_prompt %_> $post_prompt"
  PS3="$base_prompt$status_prompt$ssh_prompt$path_prompt $git_prompt ?# $post_prompt"
}

prompt_ptfancy_preview () {
  local -a colors
  colors=(red green blue)

  if (( ! $#* )); then
    prompt_preview_theme ptfancy $colors[1] $colors[2] $colors[3]
  else
    prompt_preview_theme ptfancy "$@"
  fi
}

prompt_ptfancy_setup "$@"

# Local Variables:
# mode: sh
# End:
