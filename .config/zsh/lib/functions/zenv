#!/usr/bin/env zsh
#
# This function tries to setup platoform independed environment
# variables.  This function WILL NOT change previously set veriables
# (if any).
#
# OSLONG      Contains the (long) name of the operating system, e.g.
#             GNU/Linux, macOS, etc.
# OSSHORT     Contains the short name of the operating system, e.g.
#             Linux, OSX, etc.  Will be used in zsh scripts to
#             provide OS-wide configuration.
# OSDISTRO    Contains the distribution-name in case of a Linux
#             system, e.g. Debian, Gentoo, Ubuntu, Fedora, OpenSuSE.
# OSRELEASE   Contains the release number of the OS, e.g. 7.0
#             (FreeBSD), 10.4 (OSX), etc.
# ARCH        Contains the CPU-architecture of the system.
# HOST        Contains the effective (short) hostname.
# HOSTNAME    Contains the effective (fully qualified) hostname.
# UID         Contains the effective user ID.
# GID         Contains the effective group ID.

# function zenv {

# If one of these is already set we won't override it.
# Thus we need a copy before we load the cache.
[ -z "$OSLONG" ]    || OSLONG_BACK="$OSLONG"
[ -z "$OSSHORT" ]   || OSSHORT_BACK="$OSSHORT"
[ -z "$OSDISTRO" ]  || OSDISTRO_BACK="$OSDISTRO"
[ -z "$OSRELEASE" ] || OSRELEASE_BACK="$OSRELEASE"
[ -z "$ARCH" ]      || ARCH_BACK="$ARCH"
[ -z "$HOST" ]      || HOST_BACK="$HOST"
[ -z "$HOSTNAME" ]  || HOSTNAME_BACK="$HOSTNAME"
[ -z "$UID" ]       || UID_BACK="$UID"
[ -z "$GID" ]       || GID_BACK="$GID"

# Probable it is no so good, to silently create a directory, but I
# use it on my Linux and macOS machines.  Thus, this will create
# this directory if isn't present.
[ ! -d $ZSHCACHEDIR ] || mkdir -p $ZSHCACHEDIR

# If the values of the somewhat more complex variables are already
# detected, source them from a file instead of invoking this whole
# thing each time the function call.

if command -v hostname >/dev/null 2>&1; then
  ZSH_ENV_CACHE="$ZSHCACHEDIR/env/$(hostname -s)"
else
  ZSH_ENV_CACHE=$ZSHCACHEDIR/env/localhost
fi

ZSH_ENV_CACHE_LOCK=$ZSH_ENV_CACHE.lock

if [ -L $ZSH_ENV_CACHE_LOCK ]; then
  # Someone is writing to the cache, let's just wait a little.
  echo -n "zenv: Found lockfile: \"$ZSH_ENV_CACHE_LOCK\", "
  echo -n "sleeping for 1 second..."
  sleep 1

  if [ -L $ZSH_ENV_CACHE_LOCK ]; then
    echo "zenv: Lockfile still around, giving another 5 seconds..."
    sleep 5

    if [ -L $ZSH_ENV_CACHE_LOCK ]; then
      echo "zenv: Assuming stale lockfile, removing both lock and cache..."
      rm -f $ZSH_ENV_CACHE_LOCK $ZSHENV_CACHE
    fi
  fi
fi

if [ -r $ZSH_ENV_CACHE ]; then
  source $ZSH_ENV_CACHE

  # Restore previously set variables (if any).
  [ x$OSLONG_BACK = x ]    || OSLONG=$OSLONG_BACK
  [ x$OSSHORT_BACK = x ]   || OSSHORT=$OSSHORT_BACK
  [ x$OSDISTRO_BACK = x ]  || OSDISTRO=$OSDISTRO_BACK
  [ x$OSRELEASE_BACK = x ] || OSRELEASE=$OSRELEASE_BACK
  [ x$ARCH_BACK = x ]      || ARCH=$ARCH_BACK
  [ x$HOST_BACK = x ]      || HOST=$HOST_BACK
  [ x$HOSTNAME_BACK = x ]  || HOSTNAME=$HOSTNAME_BACK
  [ x$UID = x ]            || UID=$UID_BACK
  [ x$GID = x ]            || GID=$GID_BACK

  # Cleanup
  unset OSLONG_BACK OSSHORT_BACK OSDISTRO_BACK OSRELEASE_BACK
  unset ARCH_BACK HOST_BACK HOSTNAME_BACK UID_BACK GID_BACK

  # Stop sourcing this file and exit with a success status.
  return 0
fi

# If we can't load from cache, then set all the required variables
# by hand.

autoload locknwait

# Create the cache directory if it isn't present.  Again.
[ -d ${ZSH_ENV_CACHE%/*} ] || mkdir -p ${ZSH_ENV_CACHE%/*}

locknwait $ZSH_ENV_CACHE_LOCK

# A workaround to get OS name on Linux and macOS systems.
OSLONG="$(uname -o 2>/dev/null || uname -s)"

case $OSLONG in
  *Linux)
    OSSHORT=Linux

    if command -v hostname >/dev/null 2>&1; then
      HOST=$(hostname -s)
      HOSTNAME=$(hostname --fqdn)
    else
      HOST=localhost
      HOSTNAME=$HOST.localdomain
    fi

    ARCH=$(uname -m)
    [ $ARCH = i386 ] && ARCH=x86_32
    [ $ARCH = amd64 ] && ARCH=x86_64

    if command -v lsb_release >/dev/null 2>&1; then
      OSDISTRO=$(lsb_release -i | cut -f2-)
      OSRELEASE=$(lsb_release -r | cut -f2-)
      OSCODENAME=$(lsb_release -c | cut -f2-)

      if [[ $OSRELSEASE = "n/a" ]] || [[ $OSRELEASE = *rolling ]]
      then
        unset OSRELEASE
      elif [[ $OSCODENAME = "n/a" ]] || [[ $OSCODENAME = Final ]]
      then
        unset OSCODENAME
      else
        OSRELEASE="$OSRELEASE ($OSCODENAME)"
      fi
    elif [ -f /etc/redhat-release ]; then
      OSDISTRO=$(head -n 1 /etc/redhat-release | cut -d' ' -f1)
    elif [ -f /etc/os-release ]; then
      OSDISTRO=$(awk -F= '/^ID/{ printf "%s", $2; exit }' \
                     /etc/os-release)

      # arch -> Arch
      # gentoo -> Gentoo
      OSDISTRO=${(C)OSDISTRO}

      if [ -f /etc/gentoo-release ]; then
        OSRELEASE=$(grep -oE '[^ ]+$' /etc/gentoo-release)
      else
        OSRELEASE=$(awk -F= '/^BUILD_ID/{ printf "%s", $2; exit }' \
                        /etc/os-release)
      fi

      if [[ $OSRELEASE = *rolling ]]; then
        unset OSRELEASE
      fi
    elif [ -f /etc/arch-release ]; then
      OSDISTRO=Arch
    elif command -v pacman >/dev/null 2>&1; then
      OSDISTRO=Arch
    elif grep -q Ubuntu /proc/version; then
      OSDISTRO=Ubuntu
    elif grep -q Debian /proc/version; then
      OSDISTRO=Debian
    elif grep -qi centos /proc/version; then
      OSDISTRO=CentOS
    fi
    ;;
  FreeBSD)
    OSSHORT=$OSLONG

    if command -v hostname >/dev/null 2>&1; then
      HOST=$(hostname -s)
      HOSTNAME=$(hostname -f)
    else
      HOST=localhost
      HOSTNAME=$HOST.localdomain
    fi

    ARCH=$(uname -m)
    OSRELEASE=$(uname -r)
    ;;
  Darwin)
    OSLONG=macOS
    OSSHORT=OSX

    if command -v hostname >/dev/null 2>&1; then
      HOST=$(hostname -s)
      HOSTNAME=$(hostname -f)
    else
      HOST=localhost
      HOSTNAME=$HOST.localdomain
    fi

    ARCH=$(uname -p)
    case $ARCH in
      i386)
        ARCH=x86
        [ $(uname -m) = x86_64 ] && ARCH=x86_64
        ;;
      powerpc)
        ARCH=ppc32
        ;;
    esac

    OSX_VERSION=$(sw_vers | grep ProductVersion | cut -f2)
    OSRELEASE="${OSX_VERSION%.*}"
    unset OSX_VERSION
    case $OSRELEASE in
      10.4)
        OSCODENAME="Tiger"
        ;;
      10.5)
        OSCODENAME="Leopard"
        ;;
      10.6)
        OSCODENAME="Snow Leopard"
        ;;
      10.7)
        OSCODENAME="Lion"
        ;;
      10.8)
        OSCODENAME="Mountain Lion"
        ;;
      10.9)
        OSCODENAME="Mavericks"
        ;;
      10.10)
        OSCODENAME="Yosemite"
        ;;
      10.11)
        OSCODENAME="El Capitan"
        ;;
      10.12)
        OSCODENAME="Sierra"
        ;;
      10.13)
        OSCODENAME="High Sierra"
        ;;
      10.14)
        OSCODENAME="Mojave"
        ;;
      10.15)
        OSCODENAME="Catalina"
        ;;

      11*)
        OSCODENAME="Big Sur"
        ;;
      12*)   
        OSCODENAME="Monterey" 
        ;;
      *)
        OSCODENAME="Unknown"
        ;;
    esac
    OSRELEASE="$OSRELEASE ($OSCODENAME)"
    ;;
  *)
    OSSHORT=Unknown
    OSLONG=$OSSHORT
    OSRELEASE=$OSSHORT
    ARCH=$OSSHORT
    HOST=localhost
    HOSTNAME=$HOST.localdomain
esac

UID=$(id -u)
GID=$(id -g)

if ! touch $ZSH_ENV_CACHE >/dev/null 2>&1; then
  >&2 echo -n "zenv: Unable to create cache file: "
  >&2 echo "\"$ZSH_ENV_CACHE\".  Using \"/dev/null\" as a fallback."
  ZSH_ENV_CACHE=/dev/null
else
  chmod 600 $ZSH_ENV_CACHE
fi

  cat <<EOF > $ZSH_ENV_CACHE
# This file was generated automatically by zenv function.
#
# DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN.

export ARCH=$ARCH

export UID=$UID
export GID=$GID

export HOST=$HOST
export HOSTNAME=$HOSTNAME

export OSLONG="$OSLONG"
export OSSHORT="$OSSHORT"
EOF

if [ ! -z "$OSRELEASE" ]; then
  echo "export OSRELEASE=\"$OSRELEASE\"" >> $ZSH_ENV_CACHE
fi

if [ $OSSHORT = Linux ]; then
  echo "export OSDISTRO=\"$OSDISTRO\"" >> $ZSH_ENV_CACHE
fi

# We don't need lock file now.
rm -f $ZSH_ENV_CACHE_LOCK

export HOST HOSTNAME
export OSLONG OSSHORT ARCH OSRELEASE
export UID GID

if [ $OSSHORT = Linux ]; then
  export OSDISTRO
fi

# Cleanup
unset OSLONG_BACK OSSHORT_BACK OSDISTRO_BACK OSRELEASE_BACK
unset ARCH_BACK HOST_BACK HOSTNAME_BACK UID_BACK GID_BACK

# }
