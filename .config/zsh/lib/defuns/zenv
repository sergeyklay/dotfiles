#!/usr/bin/env zsh
#
# This function tries to setup platoform independed environment
# variables.  This function WILL NOT change previously set veriables
# (if any).
#
# OSLONG      Contains the (long) name of the operating system, e.g.
#             GNU/Linux, macOS, etc.
# OSSHORT     Contains the short name of the operating system, e.g.
#             Linux, OSX, etc.  Will be used in zsh scripts to
#             provide OS-wide configuration.
# OSDISTRO    Contains the distribution-name in case of a Linux
#             system, e.g. Debian, Gentoo, Ubuntu, Fedora, OpenSuSE.
# OSRELEASE   Contains the release number of the OS, e.g. 7.0
#             (FreeBSD), 10.4 (OSX), etc.

# function zenv {

# If one of these is already set we won't override it.
# Thus we need a copy before we load the cache.
[ -z "$OSLONG" ]    || OSLONG_BACK="$OSLONG"
[ -z "$OSSHORT" ]   || OSSHORT_BACK="$OSSHORT"
[ -z "$OSDISTRO" ]  || OSDISTRO_BACK="$OSDISTRO"
[ -z "$OSRELEASE" ] || OSRELEASE_BACK="$OSRELEASE"

if [ -z "$ZSH_CACHE_DIR" ]; then
  ZSH_CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/zsh"
fi

# Probable it is no so good, to silently create a directory, but I
# use it on my Linux and macOS machines.  Thus, this will create
# this directory if isn't present.
[ -d $ZSH_CACHE_DIR ] || mkdir -p $ZSH_CACHE_DIR

# If the values of the somewhat more complex variables are already
# detected, source them from a file instead of invoking this whole
# thing each time the function call.

ZSH_ENV_CACHE="$ZSH_CACHE_DIR/env/$(hostname -s 2>/dev/null || generic)"
ZSH_ENV_CACHE_LOCK=$ZSH_ENV_CACHE.lock

if [ -L $ZSH_ENV_CACHE_LOCK ]; then
  # Someone is writing to the cache, let's just wait a little.
  echo -n "zenv: Found lockfile: \"$ZSH_ENV_CACHE_LOCK\", "
  echo -n "sleeping for 1 second..."
  sleep 1

  if [ -L $ZSH_ENV_CACHE_LOCK ]; then
    echo "zenv: Lockfile still around, giving another 5 seconds..."
    sleep 5

    if [ -L $ZSH_ENV_CACHE_LOCK ]; then
      echo "zenv: Assuming stale lockfile, removing both lock and cache..."
      rm -f $ZSH_ENV_CACHE_LOCK $ZSHENV_CACHE
    fi
  fi
fi

if [ -r $ZSH_ENV_CACHE ]; then
  source $ZSH_ENV_CACHE

  # Restore previously set variables (if any).
  [ x$OSLONG_BACK = x ]    || OSLONG=$OSLONG_BACK
  [ x$OSSHORT_BACK = x ]   || OSSHORT=$OSSHORT_BACK
  [ x$OSDISTRO_BACK = x ]  || OSDISTRO=$OSDISTRO_BACK
  [ x$OSRELEASE_BACK = x ] || OSRELEASE=$OSRELEASE_BACK

  # Stop sourcing this file and exit with a success status.
  return 0
fi

# If we can't load from cache, then set all the required variables
# by hand.

autoload locknwait

# Create the cache directory if it isn't present.  Again.
[ -d ${ZSH_ENV_CACHE%/*} ] || mkdir -p ${ZSH_ENV_CACHE%/*}

locknwait $ZSH_ENV_CACHE_LOCK

# A workaround to get OS name on Linux and macOS systems.
OSLONG="$(uname -o 2>/dev/null || uname -s)"

case $OSLONG in
  *Linux)
    OSSHORT=Linux
    if builtin which lsb_release >/dev/null ; then
      OSDISTRO=$(lsb_release -i | cut -f2-)
      OSRELEASE=$(lsb_release -r | cut -f2-)
    elif [ -f /etc/redhat-release ]; then
      OSDISTRO=$(head -n 1 /etc/redhat-release | cut -d' ' -f1)
    elif [ -f /etc/os-release ]; then
      awk -F= '/^ID/{ printf "%s", $2; exit }' /etc/os-release
    elif [ -f /etc/arch-release ]; then
      OSDISTRO=Arch
    elif builtin which pacman >/dev/null; then
      OSDISTRO=Arch
    elif [ -f /etc/issue ]; then
      OSDISTRO=$(head -n 1 /etc/issue | cut -d' ' -f1)
    else
      OSDISTRO=Unknown
    fi
    ;;
  FreeBSD)
    OSSHORT=$OSLONG
    OSRELEASE="$(uname -r)"
    ;;
  Darwin)
    OSLONG=macOS
    OSSHORT=OSX
    OSX_VERSION=$(sw_vers | grep ProductVersion | cut -f2)
    OSRELEASE="${OSX_VERSION%.*}"
    unset OSX_VERSION

    ;;
  *)
    OSSHORT=Unknown
esac

if ! touch $ZSH_ENV_CACHE >/dev/null 2>&1; then
  >&2 echo -n "zenv: Unable to create cache file: "
  >&2 echo "\"$ZSH_ENV_CACHE\".  Using \"/dev/null\" as a fallback."
  ZSH_ENV_CACHE=/dev/null
else
  chmod 600 $ZSH_ENV_CACHE
fi

echo "export OSLONG=\"$OSLONG\"" >> $ZSH_ENV_CACHE
echo "export OSSHORT=\"$OSSHORT\"" >> $ZSH_ENV_CACHE
echo "export OSRELEASE=\"$OSRELEASE\"" >> $ZSH_ENV_CACHE

if [ $OSSHORT = Linux ]; then
  echo "export OSDISTRO=\"$OSDISTRO\"" >> $ZSH_ENV_CACHE
fi

# We don't need lock file now.
rm -f $ZSH_ENV_CACHE_LOCK

export OSLONG OSSHORT OSRELEASE

if [ $OSSHORT = Linux ]; then
  export OSDISTRO
fi

# }

# Local Variables:
# mode: sh
# End:
